{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitOps CLI \u00b6 A command line interface to perform operations on GitOps managed infrastructure repositories. Features \u00b6 Update YAML values in config repository to e.g. deploy an application Add pull request comments Create and delete preview environments in the config repository for a pull request in an app repository Update root config repository with all apps from child config repositories","title":"Home"},{"location":"#gitops-cli","text":"A command line interface to perform operations on GitOps managed infrastructure repositories.","title":"GitOps CLI"},{"location":"#features","text":"Update YAML values in config repository to e.g. deploy an application Add pull request comments Create and delete preview environments in the config repository for a pull request in an app repository Update root config repository with all apps from child config repositories","title":"Features"},{"location":"changelog/","text":"Changelog \u00b6 The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] \u00b6 [2.1.0] - 2020-02-09 \u00b6 Added \u00b6 New command delete-preview Added initial Changelog.md Added --verbose arg Improved git error handling Improved yaml update error handling Removed \u00b6 arg shortcuts (except -v verbose and -h help)","title":"Changelog"},{"location":"changelog/#changelog","text":"The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#210-2020-02-09","text":"","title":"[2.1.0] - 2020-02-09"},{"location":"changelog/#added","text":"New command delete-preview Added initial Changelog.md Added --verbose arg Improved git error handling Improved yaml update error handling","title":"Added"},{"location":"changelog/#removed","text":"arg shortcuts (except -v verbose and -h help)","title":"Removed"},{"location":"contributing/","text":"Contributing \u00b6 Thank you for your interest in GitOps CLI . Your contributions are highly welcome. There are multiple ways of getting involved: Report a bug Suggest a feature Contribute code Below are a few guidelines we would like you to follow. If you need help, please reach out to us by opening an issue. Report a bug \u00b6 Reporting bugs is one of the best ways to contribute. Before creating a bug report, please check that an issue reporting the same problem does not already exist. If there is such an issue, you may add your information as a comment. To report a new bug you should open an issue that summarizes the bug and set the label to . If you want to provide a fix along with your bug report: That is great! In this case please send us a pull request as described in section Contribute code . Suggest a feature \u00b6 To request a new feature you should open an issue and summarize the desired functionality and its use case. Set the issue label to . Contribute code \u00b6 This is an outline of what the workflow for code contributions looks like Check the list of open issues . Either assign an existing issue to yourself, or create a new one that you would like work on and discuss your ideas and use cases. It is always best to discuss your plans beforehand, to ensure that your contribution is in line with our goals. Fork the repository on GitHub Create a topic branch from where you want to base your work. This is usually master. Open a new pull request, label it and outline what you will be contributing Make commits of logical units. Make sure you sign-off on your commits git commit -s -m \"adding X to change Y\" Write good commit messages (see below). Push your changes to a topic branch in your fork of the repository. As you push your changes, update the pull request with new information and tasks as you complete them Project maintainers might comment on your work as you progress When you are done, remove the label and ping the maintainers for a review Your pull request must receive a from two MAINTAINERS Thanks for your contributions! Commit messages \u00b6 Your commit messages ideally can answer two questions: what changed and why. The subject line should feature the what and the body of the commit should describe the why . When creating a pull request, its description should reference the corresponding issue id. Sign your work / Developer certificate of origin \u00b6 All contributions (including pull requests) must agree to the Developer Certificate of Origin (DCO) version 1.1. This is exactly the same one created and used by the Linux kernel developers and posted on http://developercertificate.org/ . This is a developer's certification that he or she has the right to submit the patch for inclusion into the project. Simply submitting a contribution implies this agreement, however, please include a Signed-off-by tag in every patch (this tag is a conventional way to confirm that you agree to the DCO) - you can automate this with a Git hook git commit -s -m \"adding X to change Y\" Have fun, and happy hacking!","title":"Contributing"},{"location":"contributing/#contributing","text":"Thank you for your interest in GitOps CLI . Your contributions are highly welcome. There are multiple ways of getting involved: Report a bug Suggest a feature Contribute code Below are a few guidelines we would like you to follow. If you need help, please reach out to us by opening an issue.","title":"Contributing"},{"location":"contributing/#report-a-bug","text":"Reporting bugs is one of the best ways to contribute. Before creating a bug report, please check that an issue reporting the same problem does not already exist. If there is such an issue, you may add your information as a comment. To report a new bug you should open an issue that summarizes the bug and set the label to . If you want to provide a fix along with your bug report: That is great! In this case please send us a pull request as described in section Contribute code .","title":"Report a bug"},{"location":"contributing/#suggest-a-feature","text":"To request a new feature you should open an issue and summarize the desired functionality and its use case. Set the issue label to .","title":"Suggest a feature"},{"location":"contributing/#contribute-code","text":"This is an outline of what the workflow for code contributions looks like Check the list of open issues . Either assign an existing issue to yourself, or create a new one that you would like work on and discuss your ideas and use cases. It is always best to discuss your plans beforehand, to ensure that your contribution is in line with our goals. Fork the repository on GitHub Create a topic branch from where you want to base your work. This is usually master. Open a new pull request, label it and outline what you will be contributing Make commits of logical units. Make sure you sign-off on your commits git commit -s -m \"adding X to change Y\" Write good commit messages (see below). Push your changes to a topic branch in your fork of the repository. As you push your changes, update the pull request with new information and tasks as you complete them Project maintainers might comment on your work as you progress When you are done, remove the label and ping the maintainers for a review Your pull request must receive a from two MAINTAINERS Thanks for your contributions!","title":"Contribute code"},{"location":"contributing/#commit-messages","text":"Your commit messages ideally can answer two questions: what changed and why. The subject line should feature the what and the body of the commit should describe the why . When creating a pull request, its description should reference the corresponding issue id.","title":"Commit messages"},{"location":"contributing/#sign-your-work-developer-certificate-of-origin","text":"All contributions (including pull requests) must agree to the Developer Certificate of Origin (DCO) version 1.1. This is exactly the same one created and used by the Linux kernel developers and posted on http://developercertificate.org/ . This is a developer's certification that he or she has the right to submit the patch for inclusion into the project. Simply submitting a contribution implies this agreement, however, please include a Signed-off-by tag in every patch (this tag is a conventional way to confirm that you agree to the DCO) - you can automate this with a Git hook git commit -s -m \"adding X to change Y\" Have fun, and happy hacking!","title":"Sign your work / Developer certificate of origin"},{"location":"getting-started/","text":"Getting started \u00b6 The GitOps CLI provides several commands which can be used to perform typical operations on GitOps managed infrastructure repositories. You can print a help page listing all available commands with gitopscli --help : usage: gitopscli [-h] {deploy,sync-apps,add-pr-comment,create-preview,delete-preview} ... GitOps CLI optional arguments: -h, --help show this help message and exit commands: {deploy,sync-apps,add-pr-comment,create-preview,delete-preview} deploy Trigger a new deployment by changing YAML values sync-apps Synchronize applications (= every directory) from apps config repository to apps root config add-pr-comment Create a comment on the pull request create-preview Create a preview environment delete-preview Delete a preview environment A detailed description of the individual commands including some examples can be found in the CLI Commands section.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"The GitOps CLI provides several commands which can be used to perform typical operations on GitOps managed infrastructure repositories. You can print a help page listing all available commands with gitopscli --help : usage: gitopscli [-h] {deploy,sync-apps,add-pr-comment,create-preview,delete-preview} ... GitOps CLI optional arguments: -h, --help show this help message and exit commands: {deploy,sync-apps,add-pr-comment,create-preview,delete-preview} deploy Trigger a new deployment by changing YAML values sync-apps Synchronize applications (= every directory) from apps config repository to apps root config add-pr-comment Create a comment on the pull request create-preview Create a preview environment delete-preview Delete a preview environment A detailed description of the individual commands including some examples can be found in the CLI Commands section.","title":"Getting started"},{"location":"license/","text":"License \u00b6 Apache-2.0 ToDo Add markdown styled license text.","title":"License"},{"location":"license/#license","text":"Apache-2.0 ToDo Add markdown styled license text.","title":"License"},{"location":"setup/","text":"Setup \u00b6 Currently there are two different ways to setup and use the GitOps CLI. Docker \u00b6 The official GitOps CLI Docker image comes with all dependencies pre-installed and ready-to-use. Pull it with: docker pull baloiseincubator/gitopscli Start the CLI and the print the help page with: docker run --rm -it baloiseincubator/gitopscli --help From Source \u00b6 Clone the repository and install the GitOps CLI on your machine: git clone https://github.com/baloise-incubator/gitopscli.git pip3 install gitopscli/ You can now use it from the command line: gitopscli --help If you don't need the CLI anymore, you can uninstall it with pip3 uninstall gitopscli","title":"Setup"},{"location":"setup/#setup","text":"Currently there are two different ways to setup and use the GitOps CLI.","title":"Setup"},{"location":"setup/#docker","text":"The official GitOps CLI Docker image comes with all dependencies pre-installed and ready-to-use. Pull it with: docker pull baloiseincubator/gitopscli Start the CLI and the print the help page with: docker run --rm -it baloiseincubator/gitopscli --help","title":"Docker"},{"location":"setup/#from-source","text":"Clone the repository and install the GitOps CLI on your machine: git clone https://github.com/baloise-incubator/gitopscli.git pip3 install gitopscli/ You can now use it from the command line: gitopscli --help If you don't need the CLI anymore, you can uninstall it with pip3 uninstall gitopscli","title":"From Source"},{"location":"commands/add-pr-comment/","text":"add-pr-comment \u00b6 The add-pr-comment command adds a comment to a pull request. You can also reply to an existing comment by providing the --parent-id . Example \u00b6 gitopscli add-pr-comment \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --pr-id 4711 \\ --text \"this is a comment\" Usage \u00b6 usage: gitopscli add-pr-comment [-h] --username USERNAME --password PASSWORD --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] --text TEXT optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --text TEXT the text of the comment","title":"add-pr-comment"},{"location":"commands/add-pr-comment/#add-pr-comment","text":"The add-pr-comment command adds a comment to a pull request. You can also reply to an existing comment by providing the --parent-id .","title":"add-pr-comment"},{"location":"commands/add-pr-comment/#example","text":"gitopscli add-pr-comment \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --pr-id 4711 \\ --text \"this is a comment\"","title":"Example"},{"location":"commands/add-pr-comment/#usage","text":"usage: gitopscli add-pr-comment [-h] --username USERNAME --password PASSWORD --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] --text TEXT optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --text TEXT the text of the comment","title":"Usage"},{"location":"commands/create-preview/","text":"create-preview \u00b6 usage: gitopscli create-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--branch BRANCH] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH Branch to push the changes to --create-pr [CREATE_PR] Creates a Pull Request (only when --branch is not master/default branch) --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging Example \u00b6 gitopscli create-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOpsCLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --branch \"some-branch-name\" \\ --create-pr \\ --pr-id 4711 \\ --auto-merge .gitops.config.yaml \u00b6 Make sure that your application repository contains a .gitops.config.yaml file. deploymentConfig : # The organisation name of your deployment repo org : DPL # The repostiory name of your deployment repo repository : incubator-non-prod # The name of the application that is used in your deployment repo applicationName : example previewConfig : route : host : # your router host. #{SHA256_8CHAR_BRANCH_HASH} gets replaced by a shortened hash of your feature branch name template : example-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : # Paths that should be replaced - path : image.tag variable : GIT_COMMIT # this is the latest git hash of the PR branch - path : route.host variable : ROUTE_HOST # this is the resolved SHA256_8CHAR_BRANCH_HASH from above","title":"create-preview"},{"location":"commands/create-preview/#create-preview","text":"usage: gitopscli create-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--branch BRANCH] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] --pr-id PR_ID [--parent-id PARENT_ID] [-v [VERBOSE]] optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH Branch to push the changes to --create-pr [CREATE_PR] Creates a Pull Request (only when --branch is not master/default branch) --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) --pr-id PR_ID the id of the pull request --parent-id PARENT_ID the id of the parent comment, in case of a reply -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"create-preview"},{"location":"commands/create-preview/#example","text":"gitopscli create-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOpsCLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --branch \"some-branch-name\" \\ --create-pr \\ --pr-id 4711 \\ --auto-merge","title":"Example"},{"location":"commands/create-preview/#gitopsconfigyaml","text":"Make sure that your application repository contains a .gitops.config.yaml file. deploymentConfig : # The organisation name of your deployment repo org : DPL # The repostiory name of your deployment repo repository : incubator-non-prod # The name of the application that is used in your deployment repo applicationName : example previewConfig : route : host : # your router host. #{SHA256_8CHAR_BRANCH_HASH} gets replaced by a shortened hash of your feature branch name template : example-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : # Paths that should be replaced - path : image.tag variable : GIT_COMMIT # this is the latest git hash of the PR branch - path : route.host variable : ROUTE_HOST # this is the resolved SHA256_8CHAR_BRANCH_HASH from above","title":".gitops.config.yaml"},{"location":"commands/delete-preview/","text":"delete-preview \u00b6 usage: gitopscli delete-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--branch BRANCH] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] [-v [VERBOSE]] optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH Branch to push the changes to --create-pr [CREATE_PR] Creates a Pull Request (only when --branch is not master/default branch) --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging Example \u00b6 gitopscli delete-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOpsCLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --branch \"some-branch-name\" \\ --create-pr \\ --auto-merge .gitops.config.yaml \u00b6 Make sure that your application repository contains a .gitops.config.yaml file. deploymentConfig : # The organisation name of your deployment repo org : DPL # The repostiory name of your deployment repo repository : incubator-non-prod # The name of the application that is used in your deployment repo applicationName : example previewConfig : route : host : # your router host. #{SHA256_8CHAR_BRANCH_HASH} gets replaced by a shortened hash of your feature branch name template : example-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : # Paths that should be replaced - path : image.tag variable : GIT_COMMIT # this is the latest git hash of the PR branch - path : route.host variable : ROUTE_HOST # this is the resolved SHA256_8CHAR_BRANCH_HASH from above","title":"delete-preview"},{"location":"commands/delete-preview/#delete-preview","text":"usage: gitopscli delete-preview [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--branch BRANCH] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] [-v [VERBOSE]] optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH Branch to push the changes to --create-pr [CREATE_PR] Creates a Pull Request (only when --branch is not master/default branch) --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"delete-preview"},{"location":"commands/delete-preview/#example","text":"gitopscli delete-preview \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOpsCLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --branch \"some-branch-name\" \\ --create-pr \\ --auto-merge","title":"Example"},{"location":"commands/delete-preview/#gitopsconfigyaml","text":"Make sure that your application repository contains a .gitops.config.yaml file. deploymentConfig : # The organisation name of your deployment repo org : DPL # The repostiory name of your deployment repo repository : incubator-non-prod # The name of the application that is used in your deployment repo applicationName : example previewConfig : route : host : # your router host. #{SHA256_8CHAR_BRANCH_HASH} gets replaced by a shortened hash of your feature branch name template : example-{SHA256_8CHAR_BRANCH_HASH}.example.tld replace : # Paths that should be replaced - path : image.tag variable : GIT_COMMIT # this is the latest git hash of the PR branch - path : route.host variable : ROUTE_HOST # this is the resolved SHA256_8CHAR_BRANCH_HASH from above","title":".gitops.config.yaml"},{"location":"commands/deploy/","text":"deploy \u00b6 The deploy command can be used to deploy applications by updating the image tags in the YAML files of a config repository. Of course, you can also use it to update any YAML values in a git repository. However, only one YAML can be changed at a time. Example \u00b6 Let's assume you have a repository deployment/incubator-non-prod which contains your deployment configuration in the form of YAML files (e.g. Helm charts). To deploy a new version of your application you need to update some values in example/values.yaml . # Example Helm values.yaml frontend : repository : my-app/frontend tag : 1.0.0 # <- you want to change this value backend : repository : my-app/backend tag : 1.0.0 # <- and this one With the following command GitOps CLI will update both values to 1.1.0 on the master branch. gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"incubator-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0}\" \\ --branch \"master\" Number Of Commits \u00b6 Note that by default GitOps CLI will create a separate commit for every value change: commit d98913ad8fecf571d5f8c3635f8070b05c43a9ca Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'backend.tag' to '1.1.0' in example/values.yaml commit 649bc72fe798891244c11809afc9fae83309772a Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'frontend.tag' to '1.1.0' in example/values.yaml If you prefer to create a single commit for all changes add --single-commit to the command: commit 3b96839e90c35b8decf89f34a65ab6d66c8bab28 Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:00 2020 +0100 updated 2 values in example/values.yaml frontend.tag: '1.1.0' backend.tag: '1.1.0' Create Pull Request \u00b6 In some cases you might want to create a pull request for your updates. You can achieve this by adding --create-pr to the command. The pull request can be left open or merged directly with --auto-merge . We recommend creating a random branch name for automatically created pull requests to prevent collisions. gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"incubator-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0}\" \\ --branch deploy- $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 5 | head -n 1 ) \\ --create-pr \\ --auto-merge Usage \u00b6 usage: gitopscli deploy [-h] --file FILE --values VALUES [--single-commit [SINGLE_COMMIT]] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--branch BRANCH] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] [-v [VERBOSE]] optional arguments: -h, --help show this help message and exit --file FILE YAML file path --values VALUES YAML/JSON object with the YAML path as key and the desired value as value --single-commit [SINGLE_COMMIT] Create only single commit for all updates --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH Branch to push the changes to --create-pr [CREATE_PR] Creates a Pull Request (only when --branch is not master/default branch) --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"deploy"},{"location":"commands/deploy/#deploy","text":"The deploy command can be used to deploy applications by updating the image tags in the YAML files of a config repository. Of course, you can also use it to update any YAML values in a git repository. However, only one YAML can be changed at a time.","title":"deploy"},{"location":"commands/deploy/#example","text":"Let's assume you have a repository deployment/incubator-non-prod which contains your deployment configuration in the form of YAML files (e.g. Helm charts). To deploy a new version of your application you need to update some values in example/values.yaml . # Example Helm values.yaml frontend : repository : my-app/frontend tag : 1.0.0 # <- you want to change this value backend : repository : my-app/backend tag : 1.0.0 # <- and this one With the following command GitOps CLI will update both values to 1.1.0 on the master branch. gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"incubator-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0}\" \\ --branch \"master\"","title":"Example"},{"location":"commands/deploy/#number-of-commits","text":"Note that by default GitOps CLI will create a separate commit for every value change: commit d98913ad8fecf571d5f8c3635f8070b05c43a9ca Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'backend.tag' to '1.1.0' in example/values.yaml commit 649bc72fe798891244c11809afc9fae83309772a Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:32 2020 +0100 changed 'frontend.tag' to '1.1.0' in example/values.yaml If you prefer to create a single commit for all changes add --single-commit to the command: commit 3b96839e90c35b8decf89f34a65ab6d66c8bab28 Author: GitOpsCLI <gitopscli@baloise.dev> Date: Thu Mar 12 15:30:00 2020 +0100 updated 2 values in example/values.yaml frontend.tag: '1.1.0' backend.tag: '1.1.0'","title":"Number Of Commits"},{"location":"commands/deploy/#create-pull-request","text":"In some cases you might want to create a pull request for your updates. You can achieve this by adding --create-pr to the command. The pull request can be left open or merged directly with --auto-merge . We recommend creating a random branch name for automatically created pull requests to prevent collisions. gitopscli deploy \\ --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOps CLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"deployment\" \\ --repository-name \"incubator-non-prod\" \\ --file \"example/values.yaml\" \\ --values \"{frontend.tag: 1.1.0, backend.tag: 1.1.0}\" \\ --branch deploy- $( cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 5 | head -n 1 ) \\ --create-pr \\ --auto-merge","title":"Create Pull Request"},{"location":"commands/deploy/#usage","text":"usage: gitopscli deploy [-h] --file FILE --values VALUES [--single-commit [SINGLE_COMMIT]] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [--branch BRANCH] [--create-pr [CREATE_PR]] [--auto-merge [AUTO_MERGE]] [-v [VERBOSE]] optional arguments: -h, --help show this help message and exit --file FILE YAML file path --values VALUES YAML/JSON object with the YAML path as key and the desired value as value --single-commit [SINGLE_COMMIT] Create only single commit for all updates --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) --branch BRANCH Branch to push the changes to --create-pr [CREATE_PR] Creates a Pull Request (only when --branch is not master/default branch) --auto-merge [AUTO_MERGE] Automatically merge the created PR (only valid with --create-pr) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging","title":"Usage"},{"location":"commands/sync-apps/","text":"sync-apps \u00b6 usage: gitopscli sync-apps [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [-v [VERBOSE]] --root-organisation ROOT_ORGANISATION --root-repository-name ROOT_REPOSITORY_NAME optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --root-organisation ROOT_ORGANISATION Apps config repository organisation --root-repository-name ROOT_REPOSITORY_NAME Root config repository organisation Example \u00b6 gitopscli sync-apps --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOpsCLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --root-organisation \"deployment\" \\ --root-repository-name \"apps-root-config\"","title":"sync-apps"},{"location":"commands/sync-apps/#sync-apps","text":"usage: gitopscli sync-apps [-h] --username USERNAME --password PASSWORD [--git-user GIT_USER] [--git-email GIT_EMAIL] --organisation ORGANISATION --repository-name REPOSITORY_NAME [--git-provider GIT_PROVIDER] [--git-provider-url GIT_PROVIDER_URL] [-v [VERBOSE]] --root-organisation ROOT_ORGANISATION --root-repository-name ROOT_REPOSITORY_NAME optional arguments: -h, --help show this help message and exit --username USERNAME Git username --password PASSWORD Git password or token --git-user GIT_USER Git Username --git-email GIT_EMAIL Git User Email --organisation ORGANISATION Apps Git organisation/projectKey --repository-name REPOSITORY_NAME Git repository name (not the URL, e.g. my-repo) --git-provider GIT_PROVIDER Git server provider --git-provider-url GIT_PROVIDER_URL Git provider base API URL (e.g. https://bitbucket.example.tld) -v [VERBOSE], --verbose [VERBOSE] Verbose exception logging --root-organisation ROOT_ORGANISATION Apps config repository organisation --root-repository-name ROOT_REPOSITORY_NAME Root config repository organisation","title":"sync-apps"},{"location":"commands/sync-apps/#example","text":"gitopscli sync-apps --git-provider-url https://bitbucket.baloise.dev \\ --username $GIT_USERNAME \\ --password $GIT_PASSWORD \\ --git-user \"GitOpsCLI\" \\ --git-email \"gitopscli@baloise.dev\" \\ --organisation \"my-team\" \\ --repository-name \"my-app\" \\ --root-organisation \"deployment\" \\ --root-repository-name \"apps-root-config\"","title":"Example"}]}